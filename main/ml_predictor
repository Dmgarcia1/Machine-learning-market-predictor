import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the CSV, df=DataFrame
df = pd.read_csv("stock_data.csv")

# Convert date to datetime and sort
df["Date"] = pd.to_datetime(df["Date"])
df = df.sort_values("Date")

for symbol in df["Symbol"].unique():
    print(f"\n Training model for {symbol}...")
    symbol_df = df[df["Symbol"] == symbol].copy()
    # Use Close price as target, and previous day's price as feature
    symbol_df["Previous_Close"] = symbol_df["Close"].shift(1)
    symbol_df = symbol_df.dropna()

    X = symbol_df[["Previous_Close"]]
    y = symbol_df["Close"]

    if len(symbol_df) < 5:
        print(f"Skipping {symbol} â€” not enough data to split.")
        continue
    # Split the data into training and testing sets
    # Using a time-based split to avoid data leakage
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    model = LinearRegression()
    model.fit(X_train, y_train)

    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    print(f"Mean Squared Error for {symbol}: {mse:.2f}")

    plt.plot(y_test.values, label="Actual")
    plt.plot(predictions, label="Predicted")
    plt.legend()
    plt.title(f"{symbol} Stock Price Prediction")
    plt.xlabel("Time")
    plt.ylabel("Price")
    plt.tight_layout()
    plt.show()